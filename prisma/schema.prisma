generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  externalId String @unique
  attributes Json
}

model wishlist {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  notionPageUrl       String   @unique @db.VarChar
  siteName            String   @db.VarChar
  siteDesc            String   @db.VarChar
  customCss           String?  @db.VarChar
  createdAt           DateTime @default(now()) @db.Timestamp(6)
  createdBy           String   @db.VarChar
  subdomain           String   @unique @db.VarChar
  ogImageUrl          String?  @db.VarChar
  customHead          String?  @db.VarChar
  inShowcase          Boolean  @default(false)
  isPasswordProtected Boolean  @default(false)
}

model cart {
  id            String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url           String  @unique @db.VarChar
  notionPageUrl String  @unique @db.VarChar
  ogImageUrl    String? @db.VarChar
}

model orders {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  repoUrl    String   @unique @db.VarChar
  subdomain  String   @unique @db.VarChar
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  createdBy  String   @db.VarChar
  siteName   String   @db.VarChar
  customCss  String?  @db.VarChar
  customHead String?  @db.VarChar
  inShowcase Boolean? @default(false)
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  content     String       @db.Text
    siteName            String   @db.VarChar
  ogImageUrl          String?  @db.VarChar
  Url          String?  @db.VarChar

  contentHtml String       @db.Text
  inShowcase          Boolean  @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy           String   @db.VarChar
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           Int        @id @default(autoincrement())
  link         String     @unique
  imageUrl     String
  name         String
  store        String
  interval     Int
  orderedPrice Int
  createdAt    DateTime   @default(now())
  snapshots    Snapshot[]
  status       String
  userId       String
}

model Snapshot {
  id        Int      @id @default(autoincrement())
  time      DateTime @default(now())
  price     Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}